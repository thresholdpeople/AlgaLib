TITLE:: AlgaProxySpace
summary:: Provides an Environment to work on Alga modules
categories:: Alga
related:: Classes/Alga, Classes/AlgaNode, Classes/AlgaPattern

DESCRIPTION::
An link::Classes/AlgaProxySpace:: allows to create an link::Classes/Environment:: where all newly created variables are link::Classes/AlgaNode::s or link::Classes/AlgaPattern::s.

CLASSMETHODS::
METHOD:: boot
Boot a new link::Classes/Alga:: instance and push the link::Classes/AlgaProxySpace:: as the code::currentEnvironment::.
ARGUMENT:: onBoot
Execute a link::Classes/Function:: on boot.
ARGUMENT:: server
The link::Classes/Server:: to boot emphasis::Alga:: on.
ARGUMENT:: algaServerOptions
An instance of link::Classes/AlgaServerOptions:: to boot the server with. If not specified, a default one will be created.
ARGUMENT:: clock
The emphasis::Clock:: for the internal link::Classes/AlgaScheduler::. If not specified, a default link::Classes/TempoClock:: will be created.

METHOD:: forceBoot
Same as code::boot::, but using link::Classes/Alga::'s code::forceBoot::.

METHOD:: fBoot
Alias for code::forceBoot::.

private:: addParamArgs
private:: currentNode
private:: nodes
private:: paramsArgs
private:: patternsEvents
private:: isTriggerDef
private:: make
private:: use

INSTANCEMETHODS::

METHOD:: at
Retrieve the node at the specific key.
ARGUMENT:: key
The link::Classes/Symbol:: key.

METHOD:: put
Assign a node to a key.
ARGUMENT:: key
The link::Classes/Symbol:: key.
ARGUMENT:: def
This can be any def supported by an link::Classes/AlgaNode:: / link::Classes/AlgaPattern::.

METHOD:: push
Push the link::Classes/AlgaProxySpace:: as the new code::currentEnvironment::.

METHOD:: pop
Restore the previous link::Classes/Environment::.

METHOD:: quit
Quit link::Classes/Alga:: and restore the previous link::Classes/Environment::.

METHOD:: clear
Clear all nodes.

METHOD:: stop
Stop all nodes.

METHOD:: interpTime
Set all nodes' code::interpTime::.

METHOD:: interpShape
Set all nodes' code::interpShape::.

METHOD:: playTime
Set all nodes' code::playTime::.

METHOD:: replacePlayTime
Set all nodes' code::replacePlayTime::.

METHOD:: playSafety
Set all nodes' code::playSafety::.

METHOD:: sched
Set all nodes' code::sched::.

private:: clock
private:: cmdPeriod
private:: copyAllProxySpaceParams
private:: explicitNode
private:: is
private:: it
private:: newNode
private:: newPatternFromNode
private:: patternDifferential
private:: ps
private:: pt
private:: replaceNode
private:: rpt
private:: server
private:: triggerDef
private:: nodes
private:: objects
private:: isValidAlgaClass
private:: patternsEvents
private:: make
private:: use

EXAMPLES::
code::
//Boot Alga with the AlgaProxySpace being pushed as currentEnvironment
p = AlgaProxySpace.boot;

//A simple node
~a = { SinOsc.ar(100) };

//Use it as FM input for another node
~b.play(chans:2);
~b.interpTime = 2;
~b.playTime = 0.5;
~b = { SinOsc.ar(\freq.ar(~a).range(200, 400)) };

//Replace
~a = { SinOsc.ar(440) };

//New connection as usual
~b.from({ LFNoise1.ar(100) }, \freq, time:3)

//Reset state
p.clear(time:2);

//AlgaPattern
~c.playTime = 3;
~c.play(chans:2);
~c = (def: { SinOsc.ar * EnvPerc.ar }, dur: 0.5)

//Replace the pattern
~c = { Saw.ar * EnvPerc.ar * 0.7 }

//Clear
~c.clear(time:2);

//AlgaPattern: differential
~d.interpTime = 3
~d.playTime = 2
~d.sched = 1;
~d.play(chans:2)

//Change the 'freq:' parameter to your liking and re-evaluate.
//The AlgaProxySpace will only consider the "differential" changes to the definition
(
~d = (
	def: { SinOsc.ar(\freq.kr(440)) * EnvPerc.ar },
	dur: 0.5,
	freq: Pseq([440, 880], inf)
)
)
::
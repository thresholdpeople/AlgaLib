TITLE:: AlgaPattern
summary:: Alga module representing multiple instances of sonic processes
categories:: Alga
related:: Classes/Alga, Classes/AlgaNode, Classes/AlgaSynthDef, Classes/AlgaPatch, Classes/AlgaArg, Classes/AlgaTemp, Classes/AlgaOut, Classes/AlgaStep, Classes/AlgaQuant, Classes/AlgaPatternPlayer, Classes/AlgaProxySpace


DESCRIPTION::
An link::Classes/AlgaPattern:: is the polyphonic counterpart of an link::Classes/AlgaNode::. All the basic concepts that define link::Classes/AlgaNode::s also apply to link::Classes/AlgaPattern::s. However, link::Classes/AlgaPattern::s also support link::Classes/Pattern::s as modifiers for their parameters.

It is highly suggested to look into the Examples folder for more advanced usage of link::Classes/AlgaPattern::s.


CLASSMETHODS::


METHOD:: new
Create a new link::Classes/AlgaPattern::.
ARGUMENT:: def
Mandatory argument. It accepts either a emphasis::UGen function::, a symbol to lookup a defined link::Classes/AlgaSynthDef:: or an link::Classes/Event:: describing the pattern.
ARGUMENT:: interpTime
Specify the interpolation time it takes whenever making a new connection to any parameter of this link::Classes/AlgaPattern::.
ARGUMENT:: interpShape
Specify the interpolation shape that is to be used to perform new connections. This must be defined with an link::Classes/Env:: that always starts at 0 and ends at 1. If not specified, a single ramp code::Env([0, 1], 1):: is used by default.
ARGUMENT:: playTime
Specify the fading in / fading out time that it takes for this link::Classes/AlgaPattern:: to play through speakers. These values are applied when calling the emphasis::play:: or emphasis::stop:: functions.
ARGUMENT:: playSafety
Specify a different safety method to use to scale the output of a node when using the emphasis::play:: method. Accepted values are: code::'clip', 'tanh', 'softclip', 'limiter', 'none'::.
ARGUMENT:: sched
Just like any other link::Classes/AlgaPattern:: method, the current function can be scheduled at specific times in the future, according to the clock that the link::Classes/Alga:: instance booted on the server is using.
ARGUMENT:: schedInSeconds
Specify if all sched actions should be scheduled in seconds, opposing to beats. Default is code::false::.
ARGUMENT:: tempoScaling
Specify if all timed actions should be scaled by the clock's tempo. Default is code::false::.
ARGUMENT:: sampleAccurateFuncs
Set if the link::Classes/Function::s used in the code::'def':: parameter should be sample accurate or not. Defaults to true.
ARGUMENT:: player
Set an instance of a link::Classes/AlgaPatternPlayer:: that will be used to trigger the pattern.
ARGUMENT:: server
Specify a link::Classes/Server:: to instantiated the link::Classes/AlgaPattern:: on. This link::Classes/Server:: must have had link::Classes/Alga:: booted on it. It defaults to code::Server.default::.


private:: addAlgaNoteEventType


INSTANCEMETHODS::

METHOD:: advance
Advance the link::Classes/AlgaPattern:: manually.
ARGUMENT:: sched
Schedule the triggering at a specific time.

METHOD:: step
Alias for emphasis::advance::.

METHOD:: value
Alias for emphasis::advance::.

METHOD:: stopPattern
Stop the link::Classes/AlgaPattern::.
ARGUMENT:: sched
Schedule the stop at a specific time.

METHOD:: interpolateDur
Manually trigger the interpolation of the code::'dur':: parameter. This can also be achieved with the standard code::from:: method, but code::interpolateDur:: also accepts a different set of arguments that are specific to this kind of interpolation.
ARGUMENT:: value
The new value to use.
ARGUMENT:: time
The time that it takes for the interpolation to complete.
ARGUMENT:: shape
An link::Classes/Env:: that optionally allows you to define a specific shape for the interpolation.
ARGUMENT:: resync
Specify if the pattern should be re-synced to the clock after the interpolation is completed. This option can also be permanently turned on with the code::durInterpResync:: method.
ARGUMENT:: reset
Specify if the pattern entry should be reset (restart) from the first value. This option can also be permanently turned on with the code::durInterpReset:: method.
ARGUMENT:: sched
Specify when the interpolation process should start. This can also be set with the code::schedResync:: method.
discussion::
code::
(
Alga.boot({
	//Pattern to modify
	a = AP((
		def: {
			SinOsc.ar * EnvPerc.ar(release: 0.1) * 0.5
		},
		dur: 0.5
	)).play(chans:2);

	//Metronome
	b = AP((
		def: {
			EnvPerc.ar(release: SampleDur.ir); Impulse.ar(0)
		},
		dur: 1
	)).play(chans:2);
})
)

//Using Env and resync
a.interpolateDur(0.1, time: 5, shape: Env([0, 1, 0.5, 1], [2, 3, 4]))

//No resync
a.interpolateDur(0.5, time: 3, resync: false)

//With resync + reset
a.interpolateDur(Pseq([0.25, 0.25, 0.125], inf), time: 5, reset: true)

//Other time params work too!
a.interpolateStretch(0.5, time: 3, shape: Env([0, 1, 0.5, 1], [2, 3, 4]))
::

METHOD:: interpDur
Alias for code::interpolateDur::.

METHOD:: interpolateDelta
Alias for code::interpolateDur::.

METHOD:: interpDelta
Alias for code::interpolateDur::.

METHOD:: interpolateStretch
Like code::interpolateDur::, but setting the code::'stretch':: parameter.

METHOD:: interpStretch
Alias for code::interpolateStretch::.

METHOD:: interpolateSustain
Like code::interpolateDur::, but setting the code::'sustain':: parameter.

METHOD:: interpSus
Alias for code::interpolateSustain::.

METHOD:: interpolateLegato
Like code::interpolateDur::, but setting the code::'legato':: parameter.

METHOD:: interpLegato
Alias for code::interpolateLegato::.

METHOD:: resync
Resync the pattern to its clock.

METHOD:: useMultiChannelExpansion
Set if the link::Classes/AlgaPattern:: should treat multi channel expansion like an link::Classes/AlgaNode:: or not.

METHOD:: multiChannelExpansion
Alias for emphasis::useMultiChannelExpansion::.

METHOD:: replaceDur
Set if emphasis::replace:: should be executed when changing the code::'dur':: parameter.

METHOD:: stopPatternBeforeReplace
Set the mode for how code::replace:: should be executed. If code::true:: (default), the pattern will be stopped before the replace happens. If code::false::, the pattern will only be stopped after the entire code::replace:: has happened. This case allows to perform both the fade in and fade out stages of the code::replace::.

METHOD:: schedSustainInSeconds
Set if the code::'sustain':: parameter should be scheduled in seconds. If false (default), it will be scheduled using the AlgaPattern's clock, whose tempo could be scaled.

METHOD:: sustainToDur
Set if the code::'dur':: parameter should be added to the code::'sustain':: one. Basically, this permits to scale the code::'sustain':: according to code::'dur'::.

METHOD:: sampleAccurateFuncs
Set if the link::Classes/Function::s used in the code::'def':: parameter should be sample accurate or not. Defaults to true.

METHOD:: schedResync
Set the default code::sched:: value for code::interpolateDur:: (and accompanying functions).

METHOD:: durInterpResync
Set if code::interpolateDur:: (and accompanying functions) should resync by default.

METHOD:: durInterpReset
Set if code::interpolateDur:: (and accompanying functions) should reset by default.

EXAMPLES::
code::
(
//Boot Alga
Alga.boot({
	//Declare a simple AlgaSynthDef.
	//Note that for it to be used in an AlgaPattern it must free itself.
	//Also, note the 'sampleAccurate' argument. This allows the AlgaSynthDef to use OffsetOut instead of Out
	//for sample accurate retriggering.
	AlgaSynthDef(\sinePerc, {
		SinOsc.ar(\freq.kr(440)) * EnvPerc.ar
	}, sampleAccurate: true).add;

	//Wait for definition to be sent to server
	s.sync;

	//Create an AlgaPattern and play it.
	//Unlike Pbind, AlgaPatterns use an Event to describe the parameter -> value mapping.
	a = AlgaPattern((
		def: \sinePerc,
		dur: 0.5
	)).play(chans: 2);
});
)

//Interpolate over the new Pseq. 'sched: 1' triggers it at the next beat
a.from(Pseq([220, 440, 880], inf), \freq, time: 3, sched: 1);

//Interpolate over the new Pwhite.
a.from(Pwhite(220, 880), \freq, time: 3, sched: 1);

//Interpolation can be sampled and held instead of being dynamic
a.from(Pseq([220, 440, 880], inf), \freq, sampleAndHold: true, time: 3, sched: 1);

//Change \dur does not trigger interpolation (yet), but it applies the changes directly
a.from(Pwhite(0.03, 0.5), \dur, sched: 1);

//Alternatively, the 'replaceDur' option can be used to trigger a 'replace' call, allowing for volume transitions
a.replaceDur = true;

//'The stopPatternBeforeReplace' option permits to either just stop the pattern before replacing (true),
//or to wait for the crossfade to finish before stopping the old one (false)
a.stopPatternBeforeReplace = false;

//Now it will 'replace'
a.from(0.25, \dur, time: 3, sched: 1);

//Bye bye
a.clear(time: 2);
::

private:: addActiveInterpBus
private:: addActivePatternParamSynth
private:: addCurrentActivePatternInterpSumBussesForThisPatternSynth
private:: addInNode
private:: addInNodeAlgaNode
private:: addInNodeListPattern
private:: algaInstantiated
private:: algaInstantiatedAsSender
private:: buildFromListPattern
private:: buildFromSynthDef
private:: calculateMultiChannelMismatches
private:: checkListPatternValidityAndReturnControlNames
private:: checkParamExists
private:: controlNamesList
private:: createAlgaTempSynth
private:: createEventSynths
private:: createFXSynthAndPatternSynths
private:: createOutConnection
private:: createPattern
private:: createPatternOutReceivers
private:: createPatternParamSynth
private:: createPatternParamSynths
private:: createPatternSynth
private:: currentActiveInterpBusses
private:: currentActiveInterpBusses
private:: currentActivePatternInterpSumBusses
private:: currentActivePatternInterpSumBusses
private:: currentActivePatternParamSynths
private:: currentActivePatternParamSynths
private:: currentFX
private:: currentGenericParams
private:: currentOut
private:: currentPatternBussesAndSynths
private:: currentPatternBussesAndSynths
private:: currentPatternOutNodes
private:: currentPatternOutTime
private:: currentReset
private:: dispatchListPattern
private:: dispatchNode
private:: eventPairs
private:: freeAllBusses
private:: freeAllGroups
private:: freeAllSynths
private:: freeUnusedInterpBusses
private:: from
private:: fromInner
private:: getSynthDef
private:: interpStreams
private:: interpolateBuffer
private:: interpolateDef
private:: interpolateFX
private:: interpolateGenericParam
private:: interpolateOut
private:: isAlgaPattern
private:: latestPatternInterpSumBusses
private:: latestPatternInterpSumBusses
private:: latestPatternTime
private:: makeConnection
private:: makeConnectionInner
private:: mixFrom
private:: numChannelsList
private:: parseAlgaTempListPatternParam
private:: parseDef
private:: parseDefEntry
private:: parseFX
private:: parseFXEvent
private:: parseFunctionDefEntry
private:: parseListPatternDefEntry
private:: parseListPatternParam
private:: parseOut
private:: parseOutAlgaOut
private:: parseResetOnReplaceParams
private:: pattern
private:: patternAsStream
private:: patternOrAlgaPatternArgContainsBuffers
private:: rateList
private:: removeCurrentActivePatternInterpSumBussesForThisPatternSynth
private:: replace
private:: reschedule
private:: reset
private:: resetAlgaPattern
private:: resetParam
private:: resumePattern
private:: setDur
private:: setDurAtSched
private:: stopPatternAndFreeSynths
private:: storeCurrentGenericParams

private:: currentPatternOutShape
private:: fxConvGroup
private:: fxGroup
private:: synthConvGroup
private:: prevPatternOutNodes
private:: addInNodeFilterPattern
private:: checkListPatternOrFilterPatternValidityAndReturnControlNames
private:: dispatchListPatternOrFilterPattern
private:: interpolateLegato
private:: interpolateStretch
private:: interpolateSustain
private:: isSustainTrig
private:: parseFilterPatternDefEntry
private:: parseFilterPatternParam
private:: scheduleSustain
private:: setLegato
private:: setLegatoAtSched
private:: setStretch
private:: setStretchAtSched
private:: setSustain
private:: setSustainAtSched
private:: sustainIDs
private:: addScheduledStepAction
private:: advanceAndConsumeScheduledStepActions
private:: connectionTriggersReplace
private:: scheduledStepActionsPost
private:: scheduledStepActionsPre
private:: stopPatternAndFreeInterpNormSynths
private:: currentAlgaTempGroup

private:: addAlgaPatternPlayerConnectionIfNeeded
private:: assignAlgaReaderPfunc
private:: calculatePlayersConnections
private:: defPreParsing
private:: latestPlayersAtParam
private:: paramContainsAlgaReaderPfunc
private:: patternsAsStreams
private:: player
private:: players
private:: reconnectParam
private:: removeAlgaPatternPlayerConnectionIfNeeded
private:: removePlayer

private:: addInNodeGenericPatternParam
private:: parseGenericPatternDefEntry
private:: parseGenericPatternParam
private:: recursiveObjectList
private:: resetPatternParsingVars

private:: addScalarAndGenericParams
private:: addScalarInAlgaStep
private:: latestDur
private:: latestDurStream
private:: latestScalarUniqueIDs
private:: scalarAndGenericParams
private:: scalarAndGenericParamsStreams
private:: isScalarParam
private:: scalarsInAlgaStep

private:: interpolateDurParamAtSched
private:: latestDur
private:: latestDurStream
private:: getCurrentEnvironment
private:: latestCurrentEnvironment
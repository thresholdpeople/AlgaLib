TITLE:: AlgaSynthDef
summary:: SynthDef for Alga
categories:: Alga
related:: Classes/Alga, Classes/AlgaNode, Classes/AlgaPattern

DESCRIPTION::
Hybrid between link::Classes/SynthDef:: and link::Classes/ProxySynthDef::, with the additional option of defining emphasis::outsMapping:: as an link::Classes/Array:: of emphasis::symbols and numbers/arrays:: pairs.

CLASSMETHODS::

METHOD:: new
Build a new link::Classes/AlgaSynthDef::. The arguments are the same as a normal link::Classes/SynthDef::, with the exception of the emphasis::outsMapping:: one.
ARGUMENT:: name
See link::Classes/SynthDef::.
ARGUMENT:: func
Same as link::Classes/SynthDef::, with two caveats.
NUMBEREDLIST::
## The function should end with a link::Classes/UGen:: or an link::Classes/Array:: of link::Classes/UGen::s. Unlike link::Classes/SynthDef::, an link::Classes/Out:: (or link::Classes/OffsetOut::, depending on the emphasis::sampleAccurate:: value) link::Classes/UGen:: will automatically be created according to the number of channels of the last element of the function.
## The function must not use the code::\gate:: and code::\out:: arguments, as they are declared and used internally.
::
Basically, the function should only describe the actual link::Classes/UGen:: graph.
ARGUMENT:: rates
See link::Classes/SynthDef::.
ARGUMENT:: prependArgs
See link::Classes/SynthDef::.
ARGUMENT:: outsMapping
Specify an link::Classes/Array:: of emphasis::symbols and numbers/arrays:: pairs to describe combinations of output names and channels. Futhermore, all the channels will automatically be paired with a symbol in the form of code::[\out1, 0, \out2, 1, etc... ]::. You can define as many mappings as you want, as long as they refer to existing number of channels. See the link::Classes/AlgaNode:: help file to see how to use these mappings when connecting nodes together.
code::
// \one will have 2 channels,  [0, 1]
// \two will have 2 channels,  [2, 3]
// \three will have 1 channel, [2]
// \four will have 1 channel,  [3]
// \five will have 1 channel,  [0]
(
a = AlgaSynthDef(\fourSines,
	{ SinOsc.ar([220, 440, 880, 1760]) },
	outsMapping: [\one, [0, 1], \two, [2, 3], \three, 2, \four, 3, \five, 0]
).add;
)

//All the mappings are stored in an IdentityDictionary.
a.outsMapping.postln;
::
ARGUMENT:: sampleAccurate
Use link::Classes/OffsetOut:: instead of the default link::Classes/Out::. This is mostly useful for link::Classes/AlgaSynthDef::s that will be used in link::Classes/AlgaPattern::s.
ARGUMENT:: replaceOut
Use link::Classes/ReplaceOut:: instead of the default link::Classes/Out::. This is mostly useful for link::Classes/AlgaSynthDef::s that will be used in link::Classes/AlgaPattern::s to emulate monophonic sequencers. Check the code::Examples/Extras/AlgaMonoPattern.scd:: and code::Examples/Extras/AlgaMonoPattern2.scd:: for such use cases.
ARGUMENT:: variants
See link::Classes/SynthDef::.
ARGUMENT:: metadata
See link::Classes/SynthDef::.

METHOD:: readAll
Alias for code::Alga.readAllDefs::.

METHOD:: read
Alias for code::Alga.readDef::.

private:: new_inner
private:: new_inner_inner

INSTANCEMETHODS::

METHOD:: writeDefFile
Like link::Classes/SynthDef::'s code::writeDefFile:: method, but it also writes two additional definitions needed for link::Classes/AlgaPattern::s to work.

METHOD:: write
Alias for code::writeDefFile::.

METHOD:: load
Like link::Classes/SynthDef::'s code::load:: method, but it also writes two additional definitions needed for link::Classes/AlgaPattern::s to work.

METHOD:: store
Like link::Classes/SynthDef::'s code::store:: method, but it also writes two additional definitions needed for link::Classes/AlgaPattern::s to work.

private:: add
private:: canFreeSynth
private:: canReleaseSynth
private:: explicitFree
private:: numChannels
private:: outsMapping
private:: rate
private:: sampleAccurate
private:: sendAndAddToGlobalDescLib
private:: createDirAndWriteArchiveMd
private:: triggers